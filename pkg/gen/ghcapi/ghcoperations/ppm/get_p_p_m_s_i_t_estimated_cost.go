// Code generated by go-swagger; DO NOT EDIT.

package ppm

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"context"
	"net/http"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime/middleware"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/transcom/mymove/pkg/gen/ghcmessages"
)

// GetPPMSITEstimatedCostHandlerFunc turns a function with the right signature into a get p p m s i t estimated cost handler
type GetPPMSITEstimatedCostHandlerFunc func(GetPPMSITEstimatedCostParams) middleware.Responder

// Handle executing the request and returning a response
func (fn GetPPMSITEstimatedCostHandlerFunc) Handle(params GetPPMSITEstimatedCostParams) middleware.Responder {
	return fn(params)
}

// GetPPMSITEstimatedCostHandler interface for that can handle valid get p p m s i t estimated cost params
type GetPPMSITEstimatedCostHandler interface {
	Handle(GetPPMSITEstimatedCostParams) middleware.Responder
}

// NewGetPPMSITEstimatedCost creates a new http.Handler for the get p p m s i t estimated cost operation
func NewGetPPMSITEstimatedCost(ctx *middleware.Context, handler GetPPMSITEstimatedCostHandler) *GetPPMSITEstimatedCost {
	return &GetPPMSITEstimatedCost{Context: ctx, Handler: handler}
}

/*
	GetPPMSITEstimatedCost swagger:route POST /ppm-shipments/{ppmShipmentId}/sit-estimated-cost ppm getPPMSITEstimatedCost

# Get the SIT estimated cost for a PPM shipment

Calculates and returns the SIT estimated cost for the specified PPM shipment.
*/
type GetPPMSITEstimatedCost struct {
	Context *middleware.Context
	Handler GetPPMSITEstimatedCostHandler
}

func (o *GetPPMSITEstimatedCost) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewGetPPMSITEstimatedCostParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}

// GetPPMSITEstimatedCostBody get p p m s i t estimated cost body
//
// swagger:model GetPPMSITEstimatedCostBody
type GetPPMSITEstimatedCostBody struct {

	// sit location
	// Required: true
	SitLocation *ghcmessages.SITLocationType `json:"sitLocation"`
}

// Validate validates this get p p m s i t estimated cost body
func (o *GetPPMSITEstimatedCostBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateSitLocation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPPMSITEstimatedCostBody) validateSitLocation(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"sitLocation", "body", o.SitLocation); err != nil {
		return err
	}

	if err := validate.Required("body"+"."+"sitLocation", "body", o.SitLocation); err != nil {
		return err
	}

	if o.SitLocation != nil {
		if err := o.SitLocation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "sitLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "sitLocation")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get p p m s i t estimated cost body based on the context it is used
func (o *GetPPMSITEstimatedCostBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateSitLocation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetPPMSITEstimatedCostBody) contextValidateSitLocation(ctx context.Context, formats strfmt.Registry) error {

	if o.SitLocation != nil {

		if err := o.SitLocation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "sitLocation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "sitLocation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetPPMSITEstimatedCostBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetPPMSITEstimatedCostBody) UnmarshalBinary(b []byte) error {
	var res GetPPMSITEstimatedCostBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
