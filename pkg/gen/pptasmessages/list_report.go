// Code generated by go-swagger; DO NOT EDIT.

package pptasmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ListReport An abbreviated definition for a report, without all the nested information (shipments, service items, etc). Used to fetch a list of reports more efficiently.
//
// swagger:model ListReport
type ListReport struct {

	// affiliation
	Affiliation *Affiliation `json:"Affiliation,omitempty"`

	// edipi
	// Example: 1234567890
	Edipi string `json:"Edipi,omitempty"`

	// email primary
	// Example: 9169876543
	EmailPrimary string `json:"EmailPrimary,omitempty"`

	// email secondary
	// Example: 2101234567
	EmailSecondary string `json:"EmailSecondary,omitempty"`

	// first name
	// Example: Bob
	FirstName string `json:"FirstName,omitempty"`

	// grade
	// Enum: [E_1 E_2 E_3 E_4 E_5 E_6 E_7 E_8 E_9 E_9_SPECIAL_SENIOR_ENLISTED O_1_ACADEMY_GRADUATE O_2 O_3 O_4 O_5 O_6 O_7 O_8 O_9 O_10 W_1 W_2 W_3 W_4 W_5 AVIATION_CADET CIVILIAN_EMPLOYEE ACADEMY_CADET MIDSHIPMAN]
	Grade *string `json:"Grade,omitempty"`

	// last name
	// Example: Job
	LastName string `json:"LastName,omitempty"`

	// middle initial
	// Example: G
	MiddleInitial string `json:"MiddleInitial,omitempty"`

	// phone primary
	// Example: a@b.com
	PhonePrimary string `json:"PhonePrimary,omitempty"`

	// phone secondary
	// Example: a@b.com
	PhoneSecondary string `json:"PhoneSecondary,omitempty"`

	// id
	// Format: uuid
	ID strfmt.UUID `json:"id,omitempty"`
}

// Validate validates this list report
func (m *ListReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAffiliation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGrade(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListReport) validateAffiliation(formats strfmt.Registry) error {
	if swag.IsZero(m.Affiliation) { // not required
		return nil
	}

	if m.Affiliation != nil {
		if err := m.Affiliation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Affiliation")
			}
			return err
		}
	}

	return nil
}

var listReportTypeGradePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["E_1","E_2","E_3","E_4","E_5","E_6","E_7","E_8","E_9","E_9_SPECIAL_SENIOR_ENLISTED","O_1_ACADEMY_GRADUATE","O_2","O_3","O_4","O_5","O_6","O_7","O_8","O_9","O_10","W_1","W_2","W_3","W_4","W_5","AVIATION_CADET","CIVILIAN_EMPLOYEE","ACADEMY_CADET","MIDSHIPMAN"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		listReportTypeGradePropEnum = append(listReportTypeGradePropEnum, v)
	}
}

const (

	// ListReportGradeE1 captures enum value "E_1"
	ListReportGradeE1 string = "E_1"

	// ListReportGradeE2 captures enum value "E_2"
	ListReportGradeE2 string = "E_2"

	// ListReportGradeE3 captures enum value "E_3"
	ListReportGradeE3 string = "E_3"

	// ListReportGradeE4 captures enum value "E_4"
	ListReportGradeE4 string = "E_4"

	// ListReportGradeE5 captures enum value "E_5"
	ListReportGradeE5 string = "E_5"

	// ListReportGradeE6 captures enum value "E_6"
	ListReportGradeE6 string = "E_6"

	// ListReportGradeE7 captures enum value "E_7"
	ListReportGradeE7 string = "E_7"

	// ListReportGradeE8 captures enum value "E_8"
	ListReportGradeE8 string = "E_8"

	// ListReportGradeE9 captures enum value "E_9"
	ListReportGradeE9 string = "E_9"

	// ListReportGradeE9SPECIALSENIORENLISTED captures enum value "E_9_SPECIAL_SENIOR_ENLISTED"
	ListReportGradeE9SPECIALSENIORENLISTED string = "E_9_SPECIAL_SENIOR_ENLISTED"

	// ListReportGradeO1ACADEMYGRADUATE captures enum value "O_1_ACADEMY_GRADUATE"
	ListReportGradeO1ACADEMYGRADUATE string = "O_1_ACADEMY_GRADUATE"

	// ListReportGradeO2 captures enum value "O_2"
	ListReportGradeO2 string = "O_2"

	// ListReportGradeO3 captures enum value "O_3"
	ListReportGradeO3 string = "O_3"

	// ListReportGradeO4 captures enum value "O_4"
	ListReportGradeO4 string = "O_4"

	// ListReportGradeO5 captures enum value "O_5"
	ListReportGradeO5 string = "O_5"

	// ListReportGradeO6 captures enum value "O_6"
	ListReportGradeO6 string = "O_6"

	// ListReportGradeO7 captures enum value "O_7"
	ListReportGradeO7 string = "O_7"

	// ListReportGradeO8 captures enum value "O_8"
	ListReportGradeO8 string = "O_8"

	// ListReportGradeO9 captures enum value "O_9"
	ListReportGradeO9 string = "O_9"

	// ListReportGradeO10 captures enum value "O_10"
	ListReportGradeO10 string = "O_10"

	// ListReportGradeW1 captures enum value "W_1"
	ListReportGradeW1 string = "W_1"

	// ListReportGradeW2 captures enum value "W_2"
	ListReportGradeW2 string = "W_2"

	// ListReportGradeW3 captures enum value "W_3"
	ListReportGradeW3 string = "W_3"

	// ListReportGradeW4 captures enum value "W_4"
	ListReportGradeW4 string = "W_4"

	// ListReportGradeW5 captures enum value "W_5"
	ListReportGradeW5 string = "W_5"

	// ListReportGradeAVIATIONCADET captures enum value "AVIATION_CADET"
	ListReportGradeAVIATIONCADET string = "AVIATION_CADET"

	// ListReportGradeCIVILIANEMPLOYEE captures enum value "CIVILIAN_EMPLOYEE"
	ListReportGradeCIVILIANEMPLOYEE string = "CIVILIAN_EMPLOYEE"

	// ListReportGradeACADEMYCADET captures enum value "ACADEMY_CADET"
	ListReportGradeACADEMYCADET string = "ACADEMY_CADET"

	// ListReportGradeMIDSHIPMAN captures enum value "MIDSHIPMAN"
	ListReportGradeMIDSHIPMAN string = "MIDSHIPMAN"
)

// prop value enum
func (m *ListReport) validateGradeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, listReportTypeGradePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *ListReport) validateGrade(formats strfmt.Registry) error {
	if swag.IsZero(m.Grade) { // not required
		return nil
	}

	// value enum
	if err := m.validateGradeEnum("Grade", "body", *m.Grade); err != nil {
		return err
	}

	return nil
}

func (m *ListReport) validateID(formats strfmt.Registry) error {
	if swag.IsZero(m.ID) { // not required
		return nil
	}

	if err := validate.FormatOf("id", "body", "uuid", m.ID.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this list report based on the context it is used
func (m *ListReport) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAffiliation(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ListReport) contextValidateAffiliation(ctx context.Context, formats strfmt.Registry) error {

	if m.Affiliation != nil {

		if swag.IsZero(m.Affiliation) { // not required
			return nil
		}

		if err := m.Affiliation.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("Affiliation")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("Affiliation")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ListReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ListReport) UnmarshalBinary(b []byte) error {
	var res ListReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
