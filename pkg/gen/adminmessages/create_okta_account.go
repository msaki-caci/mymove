// Code generated by go-swagger; DO NOT EDIT.

package adminmessages

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateOktaAccount create okta account
//
// swagger:model CreateOktaAccount
type CreateOktaAccount struct {

	// cac edipi
	// Example: 1234567890
	// Required: true
	// Max Length: 10
	CacEdipi string `json:"cacEdipi"`

	// email
	// Example: user@userdomain.com
	// Required: true
	Email string `json:"email"`

	// first name
	// Example: Micheal
	// Required: true
	FirstName string `json:"firstName"`

	// group Id
	// Required: true
	GroupID []string `json:"groupId"`

	// gsa Id
	// Required: true
	GsaID string `json:"gsaId"`

	// last name
	// Example: Jordan
	// Required: true
	LastName string `json:"lastName"`

	// login
	// Example: user@userdomain.com
	// Required: true
	Login string `json:"login"`

	// mobile phone
	// Required: true
	// Pattern: ^[2-9]\d{2}-\d{3}-\d{4}$
	MobilePhone string `json:"mobilePhone"`
}

// Validate validates this create okta account
func (m *CreateOktaAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCacEdipi(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFirstName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroupID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGsaID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogin(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMobilePhone(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateOktaAccount) validateCacEdipi(formats strfmt.Registry) error {

	if err := validate.RequiredString("cacEdipi", "body", m.CacEdipi); err != nil {
		return err
	}

	if err := validate.MaxLength("cacEdipi", "body", m.CacEdipi, 10); err != nil {
		return err
	}

	return nil
}

func (m *CreateOktaAccount) validateEmail(formats strfmt.Registry) error {

	if err := validate.RequiredString("email", "body", m.Email); err != nil {
		return err
	}

	return nil
}

func (m *CreateOktaAccount) validateFirstName(formats strfmt.Registry) error {

	if err := validate.RequiredString("firstName", "body", m.FirstName); err != nil {
		return err
	}

	return nil
}

func (m *CreateOktaAccount) validateGroupID(formats strfmt.Registry) error {

	if err := validate.Required("groupId", "body", m.GroupID); err != nil {
		return err
	}

	return nil
}

func (m *CreateOktaAccount) validateGsaID(formats strfmt.Registry) error {

	if err := validate.RequiredString("gsaId", "body", m.GsaID); err != nil {
		return err
	}

	return nil
}

func (m *CreateOktaAccount) validateLastName(formats strfmt.Registry) error {

	if err := validate.RequiredString("lastName", "body", m.LastName); err != nil {
		return err
	}

	return nil
}

func (m *CreateOktaAccount) validateLogin(formats strfmt.Registry) error {

	if err := validate.RequiredString("login", "body", m.Login); err != nil {
		return err
	}

	return nil
}

func (m *CreateOktaAccount) validateMobilePhone(formats strfmt.Registry) error {

	if err := validate.RequiredString("mobilePhone", "body", m.MobilePhone); err != nil {
		return err
	}

	if err := validate.Pattern("mobilePhone", "body", m.MobilePhone, `^[2-9]\d{2}-\d{3}-\d{4}$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this create okta account based on context it is used
func (m *CreateOktaAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CreateOktaAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateOktaAccount) UnmarshalBinary(b []byte) error {
	var res CreateOktaAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
