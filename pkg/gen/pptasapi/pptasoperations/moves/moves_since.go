// Code generated by go-swagger; DO NOT EDIT.

package moves

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// MovesSinceHandlerFunc turns a function with the right signature into a moves since handler
type MovesSinceHandlerFunc func(MovesSinceParams) middleware.Responder

// Handle executing the request and returning a response
func (fn MovesSinceHandlerFunc) Handle(params MovesSinceParams) middleware.Responder {
	return fn(params)
}

// MovesSinceHandler interface for that can handle valid moves since params
type MovesSinceHandler interface {
	Handle(MovesSinceParams) middleware.Responder
}

// NewMovesSince creates a new http.Handler for the moves since operation
func NewMovesSince(ctx *middleware.Context, handler MovesSinceHandler) *MovesSince {
	return &MovesSince{Context: ctx, Handler: handler}
}

/*
	MovesSince swagger:route POST /test/getMovesSince moves movesSince

summary

summary2
*/
type MovesSince struct {
	Context *middleware.Context
	Handler MovesSinceHandler
}

func (o *MovesSince) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewMovesSinceParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
