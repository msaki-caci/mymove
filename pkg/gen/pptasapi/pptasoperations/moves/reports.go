// Code generated by go-swagger; DO NOT EDIT.

package moves

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the generate command

import (
	"net/http"

	"github.com/go-openapi/runtime/middleware"
)

// ReportsHandlerFunc turns a function with the right signature into a reports handler
type ReportsHandlerFunc func(ReportsParams) middleware.Responder

// Handle executing the request and returning a response
func (fn ReportsHandlerFunc) Handle(params ReportsParams) middleware.Responder {
	return fn(params)
}

// ReportsHandler interface for that can handle valid reports params
type ReportsHandler interface {
	Handle(ReportsParams) middleware.Responder
}

// NewReports creates a new http.Handler for the reports operation
func NewReports(ctx *middleware.Context, handler ReportsHandler) *Reports {
	return &Reports{Context: ctx, Handler: handler}
}

/*
	Reports swagger:route GET /moves moves reports

# Reports

Gets all reports that have been approved. Based on payment requests, includes data from Move, Shipments, Orders, and Transportation Accounting Codes and Lines of Accounting.
*/
type Reports struct {
	Context *middleware.Context
	Handler ReportsHandler
}

func (o *Reports) ServeHTTP(rw http.ResponseWriter, r *http.Request) {
	route, rCtx, _ := o.Context.RouteInfo(r)
	if rCtx != nil {
		*r = *rCtx
	}
	var Params = NewReportsParams()
	if err := o.Context.BindValidRequest(r, route, &Params); err != nil { // bind params
		o.Context.Respond(rw, r, route.Produces, route, err)
		return
	}

	res := o.Handler.Handle(Params) // actually handle the request
	o.Context.Respond(rw, r, route.Produces, route, res)

}
