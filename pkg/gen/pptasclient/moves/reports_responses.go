// Code generated by go-swagger; DO NOT EDIT.

package moves

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"

	"github.com/transcom/mymove/pkg/gen/pptasmessages"
)

// ReportsReader is a Reader for the Reports structure.
type ReportsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ReportsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewReportsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewReportsUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 403:
		result := NewReportsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 500:
		result := NewReportsInternalServerError()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[GET /moves] reports", response, response.Code())
	}
}

// NewReportsOK creates a ReportsOK with default headers values
func NewReportsOK() *ReportsOK {
	return &ReportsOK{}
}

/*
ReportsOK describes a response with status code 200, with default header values.

Successfully retrieved moves. A successful fetch might still return zero moves.
*/
type ReportsOK struct {
	Payload pptasmessages.Reports
}

// IsSuccess returns true when this reports o k response has a 2xx status code
func (o *ReportsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this reports o k response has a 3xx status code
func (o *ReportsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reports o k response has a 4xx status code
func (o *ReportsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this reports o k response has a 5xx status code
func (o *ReportsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this reports o k response a status code equal to that given
func (o *ReportsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the reports o k response
func (o *ReportsOK) Code() int {
	return 200
}

func (o *ReportsOK) Error() string {
	return fmt.Sprintf("[GET /moves][%d] reportsOK  %+v", 200, o.Payload)
}

func (o *ReportsOK) String() string {
	return fmt.Sprintf("[GET /moves][%d] reportsOK  %+v", 200, o.Payload)
}

func (o *ReportsOK) GetPayload() pptasmessages.Reports {
	return o.Payload
}

func (o *ReportsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response payload
	if err := consumer.Consume(response.Body(), &o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportsUnauthorized creates a ReportsUnauthorized with default headers values
func NewReportsUnauthorized() *ReportsUnauthorized {
	return &ReportsUnauthorized{}
}

/*
ReportsUnauthorized describes a response with status code 401, with default header values.

The request was denied.
*/
type ReportsUnauthorized struct {
	Payload *pptasmessages.ClientError
}

// IsSuccess returns true when this reports unauthorized response has a 2xx status code
func (o *ReportsUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reports unauthorized response has a 3xx status code
func (o *ReportsUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reports unauthorized response has a 4xx status code
func (o *ReportsUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this reports unauthorized response has a 5xx status code
func (o *ReportsUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this reports unauthorized response a status code equal to that given
func (o *ReportsUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the reports unauthorized response
func (o *ReportsUnauthorized) Code() int {
	return 401
}

func (o *ReportsUnauthorized) Error() string {
	return fmt.Sprintf("[GET /moves][%d] reportsUnauthorized  %+v", 401, o.Payload)
}

func (o *ReportsUnauthorized) String() string {
	return fmt.Sprintf("[GET /moves][%d] reportsUnauthorized  %+v", 401, o.Payload)
}

func (o *ReportsUnauthorized) GetPayload() *pptasmessages.ClientError {
	return o.Payload
}

func (o *ReportsUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(pptasmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportsForbidden creates a ReportsForbidden with default headers values
func NewReportsForbidden() *ReportsForbidden {
	return &ReportsForbidden{}
}

/*
ReportsForbidden describes a response with status code 403, with default header values.

The request was denied.
*/
type ReportsForbidden struct {
	Payload *pptasmessages.ClientError
}

// IsSuccess returns true when this reports forbidden response has a 2xx status code
func (o *ReportsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reports forbidden response has a 3xx status code
func (o *ReportsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reports forbidden response has a 4xx status code
func (o *ReportsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this reports forbidden response has a 5xx status code
func (o *ReportsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this reports forbidden response a status code equal to that given
func (o *ReportsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the reports forbidden response
func (o *ReportsForbidden) Code() int {
	return 403
}

func (o *ReportsForbidden) Error() string {
	return fmt.Sprintf("[GET /moves][%d] reportsForbidden  %+v", 403, o.Payload)
}

func (o *ReportsForbidden) String() string {
	return fmt.Sprintf("[GET /moves][%d] reportsForbidden  %+v", 403, o.Payload)
}

func (o *ReportsForbidden) GetPayload() *pptasmessages.ClientError {
	return o.Payload
}

func (o *ReportsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(pptasmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewReportsInternalServerError creates a ReportsInternalServerError with default headers values
func NewReportsInternalServerError() *ReportsInternalServerError {
	return &ReportsInternalServerError{}
}

/*
ReportsInternalServerError describes a response with status code 500, with default header values.

An unexpected error has occurred in the server.
*/
type ReportsInternalServerError struct {
	Payload *pptasmessages.ClientError
}

// IsSuccess returns true when this reports internal server error response has a 2xx status code
func (o *ReportsInternalServerError) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this reports internal server error response has a 3xx status code
func (o *ReportsInternalServerError) IsRedirect() bool {
	return false
}

// IsClientError returns true when this reports internal server error response has a 4xx status code
func (o *ReportsInternalServerError) IsClientError() bool {
	return false
}

// IsServerError returns true when this reports internal server error response has a 5xx status code
func (o *ReportsInternalServerError) IsServerError() bool {
	return true
}

// IsCode returns true when this reports internal server error response a status code equal to that given
func (o *ReportsInternalServerError) IsCode(code int) bool {
	return code == 500
}

// Code gets the status code for the reports internal server error response
func (o *ReportsInternalServerError) Code() int {
	return 500
}

func (o *ReportsInternalServerError) Error() string {
	return fmt.Sprintf("[GET /moves][%d] reportsInternalServerError  %+v", 500, o.Payload)
}

func (o *ReportsInternalServerError) String() string {
	return fmt.Sprintf("[GET /moves][%d] reportsInternalServerError  %+v", 500, o.Payload)
}

func (o *ReportsInternalServerError) GetPayload() *pptasmessages.ClientError {
	return o.Payload
}

func (o *ReportsInternalServerError) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(pptasmessages.ClientError)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
